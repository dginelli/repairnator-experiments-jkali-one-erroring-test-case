CREATE_TABLE_PRODUCTS=CREATE TABLE IF NOT EXISTS product(id SERIAL PRIMARY KEY ,\
                       name VARCHAR(100),miniDescription VARCHAR(500),description VARCHAR(2000),price INT,amount INT, views INT, actual INT);
CREATE_TABLE_ROLE=CREATE TABLE IF NOT EXISTS role( id SERIAL PRIMARY KEY,  role VARCHAR(50));
CREATE_TABLE_USERS=CREATE TABLE IF NOT EXISTS users(id SERIAL PRIMARY KEY , name VARCHAR(20), password VARCHAR(20), role_id INT REFERENCES role(id));
CREATE_TABLE_CART=CREATE TABLE IF NOT EXISTS cart(id SERIAL PRIMARY KEY, id_user INT REFERENCES users(id), id_product INT REFERENCES product(id),\
                   date TIMESTAMP, price INT, count INT, id_status INTEGER REFERENCES status(id));
CREATE_TABLE_STATUS=CREATE TABLE IF NOT EXISTS status(id SERIAL PRIMARY KEY ,status VARCHAR(20));
SELECT_STATUS=SELECT*FROM status;
INSERT_STATUS=INSERT INTO status (status) VALUES ('cart'),('sales');
Without_Sorting=SELECT *FROM product WHERE actual=1;
Price-top=SELECT * FROM product WHERE actual=1 ORDER BY price;
Price-desc=SELECT * FROM product WHERE actual=1 ORDER BY price DESC;
A-z=SELECT * FROM product WHERE actual=1 ORDER BY name;
SELECT_ALL_FROM_USERS=SELECT users.id as user_id, name, password, role FROM users LEFT JOIN role ON users.role_id = role.id;
SELECT_LOGIN=SELECT name FROM users WHERE name=?;
GET_USER_BY_PASS_AND_LOGIN=SELECT *FROM users WHERE name = ? AND password = ?;

ADD_NEW_USER=INSERT INTO users(name, password, role_id) VALUES (?,?,(SELECT role.id FROM role WHERE role.role=?));
INSERT_ROLE=INSERT INTO role (role) VALUES ('user'),('admin');
INSERT_ROOT_USER=INSERT INTO users(name, password, role_id) VALUES ('admin','1',(SELECT id FROM role WHERE role.role='admin'));

CHECK_PRODUCT_IF_PRESENT=SELECT cart.id,cart.id_user, cart.count FROM cart WHERE cart.id_product= ? AND cart.id_user=\
                        (SELECT users.id FROM users WHERE name=?);
ADD_INCREMENT_PRODUCT_TO_CART=UPDATE cart SET count = count+1 WHERE cart.id=? AND cart.id_status=\
                        (SELECT id FROM status WHERE status.status='cart');
ADD_DISCREMENT_PRODUCT_TO_CART=UPDATE cart SET count = count-1 WHERE cart.id=? AND cart.id_status=\
                        (SELECT id FROM status WHERE status.status='cart');
ADD_NEW_PRODUCT_TO_CART=INSERT INTO cart(id_user, id_product, date, price, count) VALUES \
                        ((SELECT  users.id FROM users WHERE users.name = ?),?, now(),\
                        (SELECT price FROM product WHERE product.id = ?), 1);
SELECT_COUNT_OF_PRODUCTS_AND_SUMMA=SELECT sum(count )as count,sum(price*count) as summa FROM cart WHERE id_user=\
                        (SELECT users.id FROM users WHERE name=?) AND cart.id_status=(SELECT id FROM status WHERE status.status='cart');

SELECT_USER_CART= SELECT cart.id as cart_id, minidescription, p.name as product_name, p.id as product_id, p.price as price, cart.count as count \
                FROM cart LEFT JOIN product p ON cart.id_product = p.id \
                WHERE cart.id_user=(SELECT id FROM users WHERE users.name=?) \
                AND cart.id_status=(SELECT id FROM status WHERE status.status='cart') ORDER BY cart.id;

DELETE_PRODUCT_FROM_USER_CART=DELETE FROM cart WHERE cart.id =? AND cart.id_status=(SELECT id FROM status WHERE status.status='cart');
DELETE_USER_CART=DELETE FROM cart WHERE cart.id_user=(SELECT users.id FROM users  WHERE users.name=? \
                AND cart.id_status=(SELECT id FROM status WHERE status.status='cart'));

SET_COUNT_PRODUCT_BY_ID=UPDATE cart SET count = ? WHERE id=? AND cart.id_status=(SELECT id FROM status WHERE status.status='cart');

FUNCTION_ADD_OR_UPDATE=CREATE OR REPLACE FUNCTION addProductToCart(login VARCHAR(50), idProduct INT) RETURNS VOID AS \
$$\
BEGIN \
LOOP \
UPDATE cart SET count = count+1 WHERE cart.id= \
(SELECT cart.id FROM cart WHERE cart.id_product=idProduct AND cart.id_user= \
(SELECT id FROM users WHERE users.name = login) AND cart.id_status=(SELECT id FROM status WHERE status.status='cart')); \
IF found THEN \
RETURN; \
END IF; \
BEGIN \
INSERT INTO cart (id_user, id_product, date, price, count, id_status) VALUES \
((SELECT  users.id FROM users WHERE users.name = login),idProduct, now(), \
(SELECT price FROM product WHERE product.id = idProduct), 1,(SELECT id FROM status WHERE status.status='cart')); \
RETURN; \
EXCEPTION WHEN unique_violation THEN \
END; \
END LOOP; \
END; \
$$ \
LANGUAGE plpgsql;

SELECT_FUNCTION_ADD_OR_UPDATE=SELECT addProductToCart(?,?);

SELECT_CART=SELECT cart.id as id_cart, p.id as id_product, cart.count as cart_count, p.amount AS product_count, p.name as title \
            FROM cart LEFT JOIN product p ON cart.id_product = p.id \
            WHERE cart.id_user=(SELECT id FROM users WHERE users.name=?) \
            AND cart.id_status=(SELECT id FROM status WHERE status.status='cart');
UPDATE_COUNT_OF_PRODUCTS=UPDATE product SET amount =? WHERE product.id =?;
UPDATE_CART_STATUS=UPDATE cart SET id_status=(SELECT status.id FROM status WHERE status.status='sales') WHERE cart.id=?;
GET_PRODUCT=SELECT * FROM product WHERE id=?;
SELECT_ADMIN=SELECT name, password FROM users WHERE name =? AND password=? AND role_id= (SELECT id FROM role WHERE role.role='admin');
CHECK_IF_PAID=SELECT cart.id FROM cart WHERE id_product =? AND id_status=(SELECT id FROM status WHERE status.status='sales');
SET_PRODUCT_NOT_VISIBLE=UPDATE product SET actual=2 WHERE product.id =?;
DELETE_PRODUCT_FROM_CART=DELETE FROM cart WHERE id_product=?;
DELETE_PRODUCT_FROM_PRODUCT=DELETE FROM product WHERE id =?;
ADD_NEW_PRODUCT=INSERT INTO product(name, miniDescription, description, price, amount, actual) VALUES(?, ?, ?, ?, ?, ?);
UPDATE_PRODUCT=UPDATE product SET name=?, miniDescription=?, description=?,price=?, amount=? WHERE id=?;
SELECT_ALL_USERS=SELECT * FROM users;
CHECK_USER=SELECT * FROM cart WHERE id_user = ? AND id_status=(SELECT id FROM status WHERE status.status='sales');

CREATE_FUNCTION_DELETE_USER=CREATE OR REPLACE FUNCTION delete_user() RETURNS TRIGGER \
AS $$ \
BEGIN \
DELETE FROM cart WHERE id_user = OLD.id AND id_status=((SELECT id FROM status WHERE status.status='sales')); \
RETURN OLD; \
END; \
$$LANGUAGE plpgsql;
DROP_TRIGGER=DROP TRIGGER IF EXISTS tr_delete_cart ON users;
CREATE_TRIGGER=CREATE TRIGGER tr_delete_cart BEFORE DELETE ON users FOR EACH ROW EXECUTE PROCEDURE delete_user();

DELETE_USER_CART_BY_ID_USER=DELETE FROM cart WHERE id_user = ? AND id_status=(SELECT id FROM status WHERE status.status='cart');
DELETE_USER=DELETE FROM users WHERE id=?;
SELECT_ORDERS=SELECT  id, date FROM cart WHERE id_status=(SELECT id FROM status WHERE status.status='sales') ORDER BY date;
GET_ORDER_PRODUCT=SELECT id_product as id, p.name as title , p.price as price,count FROM cart LEFT JOIN product p ON cart.id_product = p.id \
  WHERE cart.id = ? AND id_status=(SELECT id FROM status WHERE status.status='sales');
GET_USER = SELECT *FROM users WHERE id = (SELECT  id_user FROM cart WHERE id = ?);
