
-- Пользователи. Роли. Права ролей. Заявки. Комментарии Заявок. Приложенные Файлы. Состояние заявки. Категории заявки.
--создаем базу данных
CREATE DATABASE java;


--создаем таблицу ролей пользователей
CREATE TABLE role (
id SERIAL PRIMARY KEY,
role TEXT
);
--добовляем в нее значения
INSERT INTO role(role) values('admin');
INSERT INTO role(role) values('superuser');
INSERT INTO role(role) values('user');
INSERT INTO role(role) values('ban');


--создаем таблицу с описанием прав
CREATE TABLE rules (
id SERIAL PRIMARY KEY,
 description VARCHAR(200)
);
--добавляем в нее значения
INSERT INTO rules (description) VALUES ('Добавить файл');
INSERT INTO rules (description) VALUES ('Добавить комментарий');
INSERT INTO rules (description) VALUES ('Создать учетную запись пользователя');
INSERT INTO rules (description) VALUES ('Измменить состояние заявки');
INSERT INTO rules (description) VALUES ('Измменить права пользователя');
INSERT INTO rules (description) VALUES ('Удалить пользователя');
INSERT INTO rules (description) VALUES ('Создать заявку');
INSERT INTO rules (description) VALUES ('Удалить заявку');
INSERT INTO rules (description) VALUES ('Создать категорию');
INSERT INTO rules (description) VALUES ('Создать изменить имя категории');
INSERT INTO rules (description) VALUES ('Удалить категорию');
INSERT INTO rules (description) VALUES ('Просмотр категорий');


--создаем таблицу role_rules связь many-to-many
CREATE TABLE role_rules(
  id SERIAL PRIMARY KEY,
  id_role INTEGER REFERENCES role(id),
  id_rules INTEGER REFERENCES rules(id)
);
--заполняем ее
INSERT INTO role_rules(id_role, id_rules) VALUES (1,1);
INSERT INTO role_rules(id_role, id_rules) VALUES (1,2);
INSERT INTO role_rules(id_role, id_rules) VALUES (1,3);
INSERT INTO role_rules(id_role, id_rules) VALUES (1,4);
INSERT INTO role_rules(id_role, id_rules) VALUES (1,5);
INSERT INTO role_rules(id_role, id_rules) VALUES (1,6);
INSERT INTO role_rules(id_role, id_rules) VALUES (1,7);
INSERT INTO role_rules(id_role, id_rules) VALUES (1,8);
INSERT INTO role_rules(id_role, id_rules) VALUES (1,9);
INSERT INTO role_rules(id_role, id_rules) VALUES (1,10);
INSERT INTO role_rules(id_role, id_rules) VALUES (1,11);
INSERT INTO role_rules(id_role, id_rules) VALUES (2,1);
INSERT INTO role_rules(id_role, id_rules) VALUES (2,2);
INSERT INTO role_rules(id_role, id_rules) VALUES (2,3);
INSERT INTO role_rules(id_role, id_rules) VALUES (2,4);
INSERT INTO role_rules(id_role, id_rules) VALUES (2,7);
INSERT INTO role_rules(id_role, id_rules) VALUES (2,8);
INSERT INTO role_rules(id_role, id_rules) VALUES (2,9);
INSERT INTO role_rules(id_role, id_rules) VALUES (2,10);
INSERT INTO role_rules(id_role, id_rules) VALUES (3,1);
INSERT INTO role_rules(id_role, id_rules) VALUES (3,2);
INSERT INTO role_rules(id_role, id_rules) VALUES (3,3);
INSERT INTO role_rules(id_role, id_rules) VALUES (3,7);
INSERT INTO role_rules(id_role, id_rules) VALUES (4,12);


--создаем таблицу пользователей
CREATE TABLE users (
id SERIAL PRIMARY KEY,
name CHARACTER VARYING(64),
login CHARACTER VARYING(64),
password CHARACTER VARYING(64)
);

--добовляем пользователей
INSERT INTO users(name, login, password) values('Andrei','Andrei', '123');
INSERT INTO users(name, login, password) values('Vasili','Vasea', '234');
INSERT INTO users(name, login, password) values('Petr','Petr', '345');

--добавляем колонку прав
ALTER TABLE users ADD COLUMN id_role INTEGER REFERENCES role(id);
-- заполняем ее
UPDATE  users SET id_role =1 WHERE id=3;
UPDATE  users SET id_role =2 WHERE id=2;
UPDATE  users SET id_role =3 WHERE id=1;

--создаем таблицу category
CREATE TABLE category(
  id SERIAL PRIMARY KEY,
  category TEXT
);
--заполняем ее
INSERT INTO category (category) VALUES ('IT');
INSERT INTO category (category) VALUES ('Bilding');
INSERT INTO category (category) VALUES ('Transport');
INSERT INTO category (category) VALUES ('Construction');

--создаем таблицу
CREATE TABLE state(
  id SERIAL PRIMARY KEY ,
  state VARCHAR(60)
);
--заполняем ее
INSERT INTO state(state) VALUES ('Новая');
INSERT INTO state(state) VALUES ('В обработке');
INSERT INTO state(state) VALUES ('Исполняется');
INSERT INTO state(state) VALUES ('Закрыта');


--создаем таблицу коментариев к заявкам
CREATE TABLE coments(
  id SERIAL PRIMARY KEY ,
  text TEXT,
  id_user INTEGER REFERENCES users(id)
);

--создаем таблицу заявок
CREATE TABLE orders(
  id SERIAL PRIMARY KEY ,
  category TEXT,
  state TEXT

);

--добовляем в таблицу coments столбец для сохранения ссылки на id заявки к которой данный коментарий относится
ALTER TABLE coments ADD COLUMN id_order INTEGER REFERENCES orders(id);

--добовляем в таблицу заявок столбец для хранения id пользователя который создал эту заявку
ALTER TABLE orders ADD COLUMN id_user INTEGER REFERENCES users(id);

--заполяем таблицу заявок
INSERT INTO orders (category, state, id_user) VALUES ('IT','new',3);
INSERT INTO orders (category, state, id_user) VALUES ('IT','old',2);
INSERT INTO orders (category, state, id_user) VALUES ('transport','execute',1);
INSERT INTO orders (category, state, id_user) VALUES ('transport','new',2);
--модифицируем
ALTER TABLE orders DROP COLUMN category
ALTER TABLE orders DROP COLUMN state
ALTER TABLE orders ADD COLUMN id_state INTEGER REFERENCES state(id);
ALTER TABLE orders ADD COLUMN id_category INTEGER REFERENCES category(id);
--заполняем
UPDATE orders SET id_state =1 WHERE id=1;
UPDATE orders SET id_state =2 WHERE id=2;
UPDATE orders SET id_state =3 WHERE id=3;
UPDATE orders SET id_state =4 WHERE id=4;
UPDATE orders SET id_category =1 WHERE id=1;
UPDATE orders SET id_category =1 WHERE id=2;
UPDATE orders SET id_category =3 WHERE id=3;
UPDATE orders SET id_category =3 WHERE id=4;

--добовляем комментарий
INSERT INTO coments(text, id_user, id_order) VALUES ('расчитать новые таблицы',3,1);

--удаляем столбец
ALTER TABLE coments DROP COLUMN id_user;

-- продолжаем заполнять таблицу
INSERT INTO coments (text,  id_order) VALUES ('произвести рефакторинг',2);
INSERT INTO coments (text,  id_order) VALUES ('перевезти стол по адресу ул.Лизюкова 15',3);
INSERT INTO coments (text,  id_order) VALUES ('перевперевозка мебели',4);

--продолжение
--добавляем колонку с именем заявки в таблицу orders
ALTER TABLE orders ADD COLUMN name_order VARCHAR(60);
--заполняем колонку
UPDATE orders SET name_order='Расчеты'WHERE id=1;
UPDATE orders SET name_order='Добавитиь Класс'WHERE id=2;
UPDATE orders SET name_order='Перевозка'WHERE id=3;
UPDATE orders SET name_order='Перевозка'WHERE id=4;

--создаем таблицу файлов
CREATE TABLE files(
  id SERIAL PRIMARY KEY,
  file VARCHAR(100),
  id_order INTEGER REFERENCES orders(id)
);
-- заполняем ее
INSERT INTO files(file, id_order) VALUES ('c:\\image\\pic.jpg',1);
INSERT INTO files(file, id_order) VALUES ('c:\\image\\pic2.jpg',2);
INSERT INTO files(file, id_order) VALUES ('c:\\image\\pic3.jpg',2);


CREATE TABLE IF NOT EXISTS author(
  id  SERIAL PRIMARY KEY,
  name  VARCHAR(50) UNIQUE ,
  url VARCHAR(100));
CREATE TABLE IF NOT EXISTS adverts(
              id SERIAL PRIMARY KEY,
             title VARCHAR(200),
              url VARCHAR(100),
              text TEXT UNIQUE ,
              id_autor INTEGER REFERENCES author(id),
              date_publish TIMESTAMP WITHOUT TIME ZONE,
              date_create TIMESTAMP WITHOUT TIME ZONE
            );
DROP TABLE adverts,author;
SELECT max(date)as max_date FROM adverts;
INSERT INTO adverts (title, url, date) VALUES ('test', 'test2',now());
INSERT INTO adverts (title, url, date) VALUES ('test', 'test2', now());
SELECT * FROM author;
DELETE FROM author;
INSERT  INTO author (name, url) VALUES ('name_test1', 'urltest') RETURNING id;
INSERT  INTO author (name, url) VALUES ('name_test1', 'urltest') ON CONFLICT (name)DO NOTHING RETURNING id ;


CREATE OR REPLACE FUNCTION add_author(name_t VARCHAR(50), url_t VARCHAR(100)) RETURNS INTEGER
  AS $$
DECLARE
v int;
BEGIN
INSERT INTO author(name, url) VALUES (name_t, url_t) ON CONFLICT (name) DO NOTHING RETURNING id INTO v;
  SELECT author.id FROM author WHERE author.name = name_t INTO v;
RETURN v;
END
  $$language plpgsql;

SELECT add_author('test name', 'test url');

CREATE OR REPLACE FUNCTION add_advert(author_name VARCHAR(50), author_url VARCHAR(100),
adv_title VARCHAR(100), adv_url VARCHAR(100), adv_text TEXT, id_aut INT, data_p TIMESTAMP, data_c TIMESTAMP) RETURNS BOOLEAN
  AS $$
  DECLARE
  a BOOLEAN;
    b INT;
    id_aut INT;
  BEGIN
    SAVEPOINT save;
    a = FALSE;
    SELECT adverts.id FROM adverts WHERE adverts.text = adv_text INTO b;
    id_aut = add_author(author_name, author_url);
    INSERT INTO adverts(title, url, text, id_autor, date_publish, date_create)
    VALUES (adv_title,adv_url,adv_text,b,data_p,data_c)
    ON CONFLICT (text) DO NOTHING;

    ROLLBACK to SAVEPOINT save;
    RETURN a;
     END
  $$ LANGUAGE plpgsql;


SELECT * FROM adverts;


