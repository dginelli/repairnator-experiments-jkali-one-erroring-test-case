{
    "swagger": "2.0",
    "info": {
        "version": "1.0",
        "title": "Imsha.by REST API",
        "description": "Rest api for managing base entities in system. Rest api for managing base entities in system."
    },
    "host": "localhost:3000",
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json",
        "application/javascript"
    ],
    "produces": [
        "application/json",
        "application/javascript"
    ],
    "paths": {
        "/api/mass": {
            "post": {
                "operationId": "createMassUsingPOST",
                "summary": "Create mass",
                "tags": [
                    "mass-services",
                    "Mass"
                ],
                "description": "Create mass",
                "consumes": [
                    "application/xml"
                ],
                "produces": [
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "cityId": {
                                    "type": "string"
                                },
                                "days": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer",
                                        "format": "int32"
                                    }
                                },
                                "deleted": {
                                    "type": "boolean"
                                },
                                "duration": {
                                    "type": "integer",
                                    "format": "int64"
                                },
                                "langCode": {
                                    "type": "string"
                                },
                                "notes": {
                                    "type": "string"
                                },
                                "parishId": {
                                    "type": "string"
                                },
                                "singleStartTimestamp": {
                                    "type": "integer"
                                },
                                "time": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "cityId",
                                "days",
                                "duration",
                                "langCode",
                                "parishId"
                            ],
                            "example": {
                                "cityId": "580bb8a9f9efd4680c80db8d",
                                "langCode": "RU",
                                "duration": 36004,
                                "days": [
                                    1,
                                    2,
                                    3,
                                    4
                                ],
                                "parishId": "574360fcccbd5297c86047fd",
                                "deleted": false,
                                "notes": "Test",
                                "singleStartTimestamp": 1477408490906
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Mass"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "x-stoplight": {
                    "id": "createMassUsingPOST",
                    "beforeScript": null,
                    "afterScript": null,
                    "public": true,
                    "mock": {
                        "statusCode": 200,
                        "enabled": false
                    }
                }
            },
            "get": {
                "operationId": "filterMassesUsingGET",
                "summary": "Filter Masses",
                "tags": [
                    "mass-services",
                    "Mass"
                ],
                "consumes": [
                    "application/xml"
                ],
                "produces": [
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "filter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/trait:pageSort:offset"
                    },
                    {
                        "$ref": "#/parameters/trait:pageSort:sort"
                    },
                    {
                        "$ref": "#/parameters/trait:pageSort:limit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "content": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Mass"
                                    }
                                },
                                "totalPages": {
                                    "type": "integer"
                                },
                                "totalElements": {
                                    "type": "integer"
                                },
                                "last": {
                                    "type": "boolean"
                                },
                                "size": {
                                    "type": "integer"
                                },
                                "number": {
                                    "type": "integer"
                                },
                                "sort": {
                                    "type": "null"
                                },
                                "numberOfElements": {
                                    "type": "integer"
                                },
                                "first": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/responses/trait:standartErrors:400"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standartErrors:500"
                    }
                },
                "x-stoplight": {
                    "id": "filterMassesUsingGET",
                    "beforeScript": null,
                    "afterScript": null,
                    "public": true,
                    "mock": {
                        "statusCode": 200,
                        "enabled": false
                    }
                }
            },
            "put": {
                "operationId": "PUT_api-mass",
                "summary": "Update Mass",
                "tags": [
                    "Mass"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Mass"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "500": {
                        "description": ""
                    }
                },
                "x-stoplight": {
                    "id": "PUT_api-mass",
                    "beforeScript": null,
                    "afterScript": null,
                    "public": true,
                    "mock": {
                        "enabled": false,
                        "dynamic": false,
                        "statusCode": 200
                    }
                }
            }
        },
        "/api/mass/{massId}": {
            "parameters": [
                {
                    "name": "massId",
                    "in": "path",
                    "description": "ID of requested mass ",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "GET_api-mass-massId",
                "summary": "Get Mass details",
                "tags": [
                    "Mass"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/Mass"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/trait:standartErrors:400"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standartErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standartErrors:404"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standartErrors:500"
                    }
                },
                "x-stoplight": {
                    "id": "GET_api-mass-massId",
                    "beforeScript": null,
                    "afterScript": null,
                    "public": true,
                    "mock": {
                        "enabled": false,
                        "dynamic": false,
                        "statusCode": 200
                    }
                }
            },
            "delete": {
                "operationId": "DELETE_api-mass-massId",
                "summary": "Delete Mass",
                "tags": [
                    "Mass"
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "$ref": "#/responses/trait:standartErrors:400"
                    },
                    "403": {
                        "$ref": "#/responses/trait:standartErrors:403"
                    },
                    "404": {
                        "$ref": "#/responses/trait:standartErrors:404"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standartErrors:500"
                    }
                },
                "x-stoplight": {
                    "id": "DELETE_api-mass-massId",
                    "beforeScript": null,
                    "afterScript": null,
                    "public": true,
                    "mock": {
                        "enabled": false,
                        "dynamic": false,
                        "statusCode": 200
                    }
                }
            }
        },
        "/api/parish": {
            "get": {
                "operationId": "filterParishesUsingGET",
                "summary": "Filter Parishes",
                "tags": [
                    "parish-controller",
                    "Parish"
                ],
                "description": "filterParishes",
                "consumes": [
                    "application/xml"
                ],
                "produces": [
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "filter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "page",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "perPage",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "sorting",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "content": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Parish"
                                    }
                                },
                                "totalPages": {
                                    "type": "integer"
                                },
                                "totalElements": {
                                    "type": "integer"
                                },
                                "last": {
                                    "type": "boolean"
                                },
                                "size": {
                                    "type": "integer"
                                },
                                "number": {
                                    "type": "integer"
                                },
                                "sort": {
                                    "type": "null"
                                },
                                "numberOfElements": {
                                    "type": "integer"
                                },
                                "first": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/responses/trait:standartErrors:400"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standartErrors:500"
                    }
                },
                "x-stoplight": {
                    "id": "filterParishesUsingGET",
                    "beforeScript": null,
                    "afterScript": null,
                    "public": true,
                    "mock": {
                        "statusCode": 200,
                        "enabled": false
                    }
                }
            },
            "post": {
                "operationId": "createParishUsingPOST",
                "summary": "Create Parish",
                "tags": [
                    "parish-controller",
                    "Parish"
                ],
                "description": "createParish",
                "consumes": [
                    "application/xml"
                ],
                "produces": [
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "address": {
                                    "type": "string"
                                },
                                "cityId": {
                                    "type": "string"
                                },
                                "email": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "phone": {
                                    "type": "string"
                                },
                                "supportPhone": {
                                    "type": "string"
                                },
                                "userId": {
                                    "type": "string"
                                },
                                "website": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Parish"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "x-stoplight": {
                    "id": "createParishUsingPOST",
                    "beforeScript": null,
                    "afterScript": null,
                    "public": true,
                    "mock": {
                        "statusCode": 200,
                        "enabled": false
                    }
                }
            }
        },
        "/api/city": {
            "post": {
                "operationId": "createCityUsingPOST",
                "summary": "Create City",
                "tags": [
                    "city",
                    "City"
                ],
                "description": "Returns the URL of the new resource in the Location header.",
                "consumes": [
                    "application/xml"
                ],
                "produces": [
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/City"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name"
                            ]
                        }
                    },
                    "400": {
                        "$ref": "#/responses/trait:standartErrors:400"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standartErrors:500"
                    }
                },
                "x-stoplight": {
                    "id": "createCityUsingPOST",
                    "beforeScript": null,
                    "afterScript": null,
                    "public": true,
                    "mock": {
                        "statusCode": 200,
                        "enabled": false
                    }
                }
            },
            "get": {
                "operationId": "getAllCityUsingGET",
                "summary": "Get list of all cities.",
                "tags": [
                    "city",
                    "City"
                ],
                "description": "The list is paginated. You can provide a page number (default 0) and a page size (default 100)",
                "produces": [
                    "application/xml"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/trait:pageSort:offset"
                    },
                    {
                        "$ref": "#/parameters/trait:pageSort:sort"
                    },
                    {
                        "$ref": "#/parameters/trait:pageSort:limit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "content": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/City"
                                    }
                                },
                                "totalPages": {
                                    "type": "integer"
                                },
                                "totalElements": {
                                    "type": "integer"
                                },
                                "last": {
                                    "type": "boolean"
                                },
                                "size": {
                                    "type": "integer"
                                },
                                "number": {
                                    "type": "integer"
                                },
                                "sort": {
                                    "type": "null"
                                },
                                "numberOfElements": {
                                    "type": "integer"
                                },
                                "first": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "examples": {
                            "application/xml": {
                                "content": [
                                    {
                                        "id": "5783ef7d1a2599d1351a2dd7",
                                        "name": "Smith"
                                    },
                                    {
                                        "id": "5783ef7d1a2599d1351a2dd8",
                                        "name": "Alice"
                                    },
                                    {
                                        "id": "580bb8a9f9efd4680c80db8d",
                                        "name": "Minsk"
                                    },
                                    {
                                        "id": "580bb971f9efb566767eee77",
                                        "name": "Витебск"
                                    },
                                    {
                                        "id": "580bdd32f9ef2c589f84cf0d",
                                        "name": "Брест"
                                    },
                                    {
                                        "id": "580bdd6bf9ef2c589f84cf0e",
                                        "name": "Брест"
                                    },
                                    {
                                        "id": "580be04ff9efb318814675fe",
                                        "name": "Берестовица"
                                    },
                                    {
                                        "id": "580be0c9f9ef74bef3ec0305",
                                        "name": "Берестовица"
                                    },
                                    {
                                        "id": "580be15cf9ef74bef3ec0306",
                                        "name": "Берестовица2"
                                    }
                                ],
                                "totalPages": 1,
                                "totalElements": 9,
                                "last": true,
                                "size": 100,
                                "number": 0,
                                "sort": null,
                                "numberOfElements": 9,
                                "first": true
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/responses/trait:standartErrors:400"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "$ref": "#/responses/trait:standartErrors:500"
                    }
                },
                "x-stoplight": {
                    "id": "getAllCityUsingGET",
                    "beforeScript": null,
                    "afterScript": null,
                    "public": true,
                    "mock": {
                        "statusCode": 200,
                        "enabled": false
                    }
                }
            }
        }
    },
    "parameters": {
        "trait:pageSort:offset": {
            "name": "offset",
            "in": "query",
            "description": "number of page",
            "type": "string",
            "default": "0"
        },
        "trait:pageSort:sort": {
            "name": "sort",
            "in": "query",
            "description": "sorting values, format: +/-[field_name]",
            "type": "string",
            "default": "+name"
        },
        "trait:pageSort:limit": {
            "name": "limit",
            "in": "query",
            "description": "size of page",
            "type": "string",
            "default": "10"
        }
    },
    "responses": {
        "trait:standartErrors:400": {
            "description": "",
            "schema": {
                "type": "object",
                "properties": {
                    "timestamp": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "integer"
                    },
                    "error": {
                        "type": "string"
                    },
                    "exception": {
                        "type": "string"
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "codes": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "arguments": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "codes": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "arguments": {
                                                "type": "null"
                                            },
                                            "defaultMessage": {
                                                "type": "string"
                                            },
                                            "code": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                },
                                "defaultMessage": {
                                    "type": "string"
                                },
                                "objectName": {
                                    "type": "string"
                                },
                                "field": {
                                    "type": "string"
                                },
                                "rejectedValue": {
                                    "type": "boolean"
                                },
                                "bindingFailure": {
                                    "type": "boolean"
                                },
                                "code": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "message": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    }
                }
            }
        },
        "trait:standartErrors:403": {
            "description": "",
            "schema": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    }
                }
            }
        },
        "trait:standartErrors:404": {
            "description": "",
            "schema": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "error": {
                        "type": "string"
                    }
                }
            }
        },
        "trait:standartErrors:500": {
            "description": ""
        }
    },
    "definitions": {
        "Mass": {
            "type": "object",
            "properties": {
                "cityId": {
                    "type": "string"
                },
                "days": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "deleted": {
                    "type": "boolean"
                },
                "duration": {
                    "type": "integer",
                    "format": "int64"
                },
                "id": {
                    "type": "string"
                },
                "langCode": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "parishId": {
                    "type": "string"
                },
                "singleStartTimestamp": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                }
            },
            "required": [
                "cityId",
                "days",
                "duration",
                "langCode",
                "parishId"
            ],
            "x-stoplight": {
                "id": "Mass",
                "name": "Mass",
                "public": true
            }
        },
        "Parish": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "cityId": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "supportPhone": {
                    "type": "string"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of external system user identificator: auth0.com"
                },
                "website": {
                    "type": "string"
                }
            },
            "required": [
                "cityId",
                "id",
                "name",
                "supportPhone",
                "userId"
            ],
            "x-stoplight": {
                "id": "Parish",
                "name": "Parish",
                "public": true
            }
        },
        "City": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "id"
            ],
            "x-stoplight": {
                "id": "City",
                "name": "City",
                "public": true
            }
        }
    },
    "x-stoplight": {
        "beforeScript": "",
        "afterScript": "",
        "version": {
            "groups": {
                "savedEntries": [],
                "docs": [
                    {
                        "divider": false,
                        "items": [
                            {
                                "_id": "filtering-resources-syntaxis-BZrcPnPzt5skxALt6",
                                "type": "docTextSections"
                            }
                        ],
                        "name": "Introduction"
                    },
                    {
                        "divider": false,
                        "items": [
                            {
                                "_id": "createMassUsingPOST",
                                "type": "endpoints"
                            },
                            {
                                "_id": "filterMassesUsingGET",
                                "type": "endpoints"
                            },
                            {
                                "_id": "GET_api-mass-massId",
                                "type": "endpoints"
                            },
                            {
                                "_id": "PUT_api-mass",
                                "type": "endpoints"
                            },
                            {
                                "_id": "DELETE_api-mass-massId",
                                "type": "endpoints"
                            }
                        ],
                        "name": "Mass",
                        "description": ""
                    },
                    {
                        "items": [
                            {
                                "type": "endpoints",
                                "_id": "filterParishesUsingGET"
                            },
                            {
                                "type": "endpoints",
                                "_id": "createParishUsingPOST"
                            }
                        ],
                        "name": "Parish",
                        "description": "Manage Parish resources",
                        "divider": false
                    },
                    {
                        "divider": false,
                        "items": [
                            {
                                "_id": "createCityUsingPOST",
                                "type": "endpoints"
                            },
                            {
                                "_id": "getAllCityUsingGET",
                                "type": "endpoints"
                            }
                        ],
                        "name": "City"
                    },
                    {
                        "items": [
                            {
                                "type": "schemas",
                                "_id": "Mass"
                            },
                            {
                                "type": "schemas",
                                "_id": "Q93Ei84YpwioFLfEN"
                            },
                            {
                                "type": "schemas",
                                "_id": "City"
                            },
                            {
                                "type": "schemas",
                                "_id": "Parish"
                            }
                        ],
                        "description": "Models make up the core input and ouput structures in this API. They are used in endpoint request and response bodies.",
                        "name": "Models"
                    },
                    {
                        "divider": false,
                        "items": [
                            {
                                "_id": "pageSort",
                                "type": "traits"
                            },
                            {
                                "_id": "standartErrors",
                                "type": "traits"
                            }
                        ],
                        "name": "Traits"
                    }
                ],
                "utilFuncs": []
            }
        },
        "functions": {},
        "textSections": {
            "filtering-resources-syntaxis-BZrcPnPzt5skxALt6": {
                "id": "filtering-resources-syntaxis-BZrcPnPzt5skxALt6",
                "name": "Filtering resources syntaxis",
                "content": "The following grammar specification is written in EBNF notation (ISO 14977).\n\nRSQL expression is composed of one or more comparisons, related to each other with logical operators:\n\nLogical AND : ; or  and \n\nLogical OR : , or  or \n\nBy default, the AND operator takes precedence (i.e. it’s evaluated before any OR operators are). However, a parenthesized expression can be used to change the precedence, yielding whatever the contained expression yields.\n\ninput          = or, EOF;\nor             = and, { \",\" , and };\nand            = constraint, { \";\" , constraint };\nconstraint     = ( group | comparison );\ngroup          = \"(\", or, \")\";\nComparison is composed of a selector, an operator and an argument.\n\ncomparison     = selector, comparison-op, arguments;\nSelector identifies a field (or attribute, element, …) of the resource representation to filter by. It can be any non empty Unicode string that doesn’t contain reserved characters (see below) or a white space. The specific syntax of the selector is not enforced by this parser.\n\nselector       = unreserved-str;\nComparison operators are in FIQL notation and some of them has an alternative syntax as well:\n\nEqual to : ==\n\nNot equal to : !=\n\nLess than : =lt= or <\n\nLess than or equal to : =le= or ⇐\n\nGreater than operator : =gt= or >\n\nGreater than or equal to : =ge= or >=\n\nIn : =in=\n\nNot in : =out=\n\nYou can also simply extend this parser with your own operators (see the next section).\n\ncomparison-op  = comp-fiql | comp-alt;\ncomp-fiql      = ( ( \"=\", { ALPHA } ) | \"!\" ), \"=\";\ncomp-alt       = ( \">\" | \"<\" ), [ \"=\" ];\nArgument can be a single value, or multiple values in parenthesis separated by comma. Value that doesn’t contain any reserved character or a white space can be unquoted, other arguments must be enclosed in single or double quotes.\n\narguments      = ( \"(\", value, { \",\" , value }, \")\" ) | value;\nvalue          = unreserved-str | double-quoted | single-quoted;\n\nunreserved-str = unreserved, { unreserved }\nsingle-quoted  = \"'\", { ( escaped | all-chars - ( \"'\" | \"\\\" ) ) }, \"'\";\ndouble-quoted  = '\"', { ( escaped | all-chars - ( '\"' | \"\\\" ) ) }, '\"';\n\nreserved       = '\"' | \"'\" | \"(\" | \")\" | \";\" | \",\" | \"=\" | \"!\" | \"~\" | \"<\" | \">\";\nunreserved     = all-chars - reserved - \" \";\nescaped        = \"\\\", all-chars;\nall-chars      = ? all unicode characters ?;\nIf you need to use both single and double quotes inside a quoted argument, then you must escape one of them using \\ (backslash). If you want to use \\ literally, then double it as \\\\. Backslash has a special meaning only inside a quoted argument, not in unquoted argument.\n\nExamples\n\nExamples of RSQL expressions in both FIQL-like and alternative notation:\n\n- name==\"Kill Bill\";year=gt=2003\n- name==\"Kill Bill\" and year>2003\n- genres=in=(sci-fi,action);(director=='Christopher Nolan',actor==*Bale);year=ge=2000\n- genres=in=(sci-fi,action) and (director=='Christopher Nolan' or actor==*Bale) and year>=2000\n- director.lastName==Nolan;year=ge=2000;year=lt=2010\n- director.lastName==Nolan and year>=2000 and year<2010\n- genres=in=(sci-fi,action);genres=out=(romance,animated,horror),director==Que*Tarantino\n- genres=in=(sci-fi,action) and genres=out=(romance,animated,horror) or director==Que*Tarantino\n- \nlink: https://github.com/jirutka/rsql-parser",
                "public": true
            }
        },
        "mock": {
            "dynamic": false,
            "enabled": false
        }
    },
    "x-tests": {}
}