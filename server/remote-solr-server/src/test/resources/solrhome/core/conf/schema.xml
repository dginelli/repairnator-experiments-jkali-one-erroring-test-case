<?xml version="1.0" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<schema name="example core assets" version="1.4">
  <types>
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in the
       org.apache.solr.analysis package.
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldtype name="binary" class="solr.BinaryField"/>

    <!--  sortMissingLast and sortMissingFirst attributes are optional attributes
          that control how fields are sorted when values are missing.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->    

    <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
    -->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>

    <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the DateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType name="date" class="solr.TrieDateField" omitNorms="true" precisionStep="0" positionIncrementGap="0"/>

    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType name="tdate" class="solr.TrieDateField" omitNorms="true" precisionStep="6" positionIncrementGap="0"/>


    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting 
         purposes.  The ordering is generated based on the field name 
         and the version of the index, As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.  
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the name
     -->
    <fieldType name="random" class="solr.RandomSortField" indexed="true" />

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
     removes stop words from case-insensitive "stopwords.txt"
     (empty by default), and down cases.  At query time only, it
     also applies synonyms. -->
    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt"/>      
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\d{8,15})-(\d{8,15})" replacement="$1X$2"/> <!-- Bei IDs das - durch x ersetzen (länge des strings nicht ändern wegen highlighting -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([a-f0-9]{8})-([a-f0-9]{4})-([a-f0-9]{4})-([a-f0-9]{4})-([a-f0-9]{12})" replacement="$1X$2X$3X$4X$5"/> <!-- Bei UUIDs das - durch x ersetzen (länge des strings nicht ändern wegen highlighting -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([A-Z]{1})-([0-9]{8})-([0-9]{3,})" replacement="$1X$2X$3"/> <!-- Bei external IDs das - durch x ersetzen (länge des strings nicht ändern wegen highlighting -->   
		<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="-" replacement=""/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-FoldToASCII.txt"/>      
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\d{8,15})-(\d{8,15})" replacement="$1X$2"/> <!-- Bei IDs das - durch x ersetzen (länge des strings nicht ändern wegen highlighting -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([a-f0-9]{8})-([a-f0-9]{4})-([a-f0-9]{4})-([a-f0-9]{4})-([a-f0-9]{12})" replacement="$1X$2X$3X$4X$5"/> <!-- Bei UUIDs das - durch x ersetzen (länge des strings nicht ändern wegen highlighting -->
        <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="([A-Z]{1})-([0-9]{8})-([0-9]{3})" replacement="$1X$2X$3"/> <!-- Bei external IDs das - durch x ersetzen (länge des strings nicht ändern wegen highlighting -->   
		<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="-" replacement=""/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English: it
         tokenizes with StandardTokenizer, removes English stop words
         (stopwords_en.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer
         also applies synonyms from synonyms.txt. -->
    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords_en.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.LowerCaseFilterFactory"/>
    <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
    <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
    -->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords_en.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.LowerCaseFilterFactory"/>
    <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
    <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
    -->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A text field with defaults appropriate for English, plus
     aggressive word-splitting and autophrase features enabled.
     This field is just like text_en, except it adds
     WordDelimiterFilter to enable splitting and matching of
     words on case-change, alpha numeric boundaries, and
     non-alphanumeric chars.  This means certain compound word
     cases will work, for example query "wi fi" will match
     document "WiFi" or "wi-fi".  However, other cases will still
     not match, for example if the query is "wifi" and the
     document is "wi fi" or if the query is "wi-fi" and the
     document is "wifi".
        -->
    <fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords_en.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords_en.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
    <fieldType name="text_en_splitting_tight" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords_en.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
        <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
             possible with WordDelimiterFilter in conjuncton with stemming. -->
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Just like text_general except it reverses the characters of
     each token, to enable more efficient leading wildcard queries. -->
    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
           maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- charFilter + WhitespaceTokenizer  -->
    <!--
    <fieldType name="text_char_norm" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
    -->

    <!-- This is an example of using the KeywordTokenizer along
         With various TokenFilterFactories to produce a sortable field
         that does not include some properties of the source text
      -->
    <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <!-- KeywordTokenizer does no actual tokenizing, so the entire
             input string is preserved as a single token
          -->
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!-- The LowerCase TokenFilter does what you expect, which can be
             when you want your sorting to be case insensitive
          -->
        <filter class="solr.LowerCaseFilterFactory" />
        <!-- The TrimFilter removes any leading or trailing whitespace -->
        <filter class="solr.TrimFilterFactory" />
        <!-- The PatternReplaceFilter gives you the flexibility to use
             Java Regular expression to replace any sequence of characters
             matching a pattern with an arbitrary replacement string, 
             which may include back references to portions of the original
             string matched by the pattern.
             
             See the Java Regular Expression documentation for more
             information on pattern and replacement string syntax.
             
             http://java.sun.com/j2se/1.6.0/docs/api/java/util/regex/package-summary.html
          -->
        <filter class="solr.PatternReplaceFilterFactory"
                pattern="([^a-z])" replacement="" replace="all"
        />
      </analyzer>
    </fieldType>
    
    <fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldtype>

    <fieldtype name="payloads" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!--
        The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
        a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
        Attributes of the DelimitedPayloadTokenFilterFactory : 
         "delimiter" - a one character delimiter. Default is | (pipe)
     "encoder" - how to encode the following value into a playload
        float -> org.apache.lucene.analysis.payloads.FloatEncoder,
        integer -> o.a.l.a.p.IntegerEncoder
        identity -> o.a.l.a.p.IdentityEncoder
            Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
         -->
        <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
      </analyzer>
    </fieldtype>

    <!-- lowercases the entire field value, keeping it as a single token.  -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
      </analyzer>
    </fieldType>

    <fieldType name="text_path" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.PathHierarchyTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  --> 
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if 
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
    <fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate"/>

   <!--
    A Geohash is a compact representation of a latitude longitude pair in a single field.
    See http://wiki.apache.org/solr/SpatialSearch
   -->
    <fieldtype name="geohash" class="solr.GeoHashField"/>

    <!-- RMS Right Checks -->
    <fieldType name="rightsterm" class="solr.TextField" positionIncrementGap="100">
       <analyzer type="index">
            <tokenizer class="solr.PatternTokenizerFactory" pattern="\_\s*" />
            <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
           <analyzer type="query">
            <tokenizer class="solr.PatternTokenizerFactory" pattern="\ \s*" />
            <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>
  </types>

 <fields>   
  <field name="_version_" type="long"     indexed="true"  stored="true"/>

   <!-- Only used by the Media Search Handler request handler. Do not write to those fields! -->	
   <field name="_numberOfMarkersTotal_" 	type="int"     indexed="true"  stored="true" />
   <field name="_numberOfMarkersMatching_" 	type="int"     indexed="true"  stored="true" />
 
   <field name="assetID"           type="string" indexed="true" stored="true" required="true"/>

   <field name="entityID"          type="string" indexed="true" stored="true" required="true" />
   <field name="entityType"        type="string" indexed="true" stored="true" required="true" />

   <field name="title"             type="string" indexed="true" stored="true" required="false"/>
   <field name="type"              type="int" indexed="true" stored="true" required="true"/>
   <field name="source"            type="string" indexed="true" stored="true" required="false"/>
   
   <field name="partitionID"       type="string" indexed="true" stored="true" required="true" />
   <field name="catalogIDs"        type="string" indexed="true" stored="true" multiValued="true" required="false" />
   <field name="productCatalogIDs" type="string" indexed="true" stored="true" multiValued="true" required="false" />
   <field name="selectionIDs"      type="string" indexed="true" stored="true" multiValued="true" required="false" />   
   <field name="bundleIDs" 		   type="string" indexed="true" stored="true" multiValued="true" required="false" />
   
   <field name="text"              type="text_general" indexed="true" stored="false" multiValued="true" /> <!-- Search here. ONLY copy field destination.  -->
   <field name="textWrite"         type="text_general" indexed="true" stored="true" multiValued="true" /> <!-- Index here -->

   <field name="dateOfAvailabilityTimestamp" type="date" indexed="true" stored="true" required="false" />
   <field name="contentManagerID"  type="string" indexed="true" stored="true" required="false" />
   <field name="topicIDs"          type="string" indexed="true" stored="true" required="false" multiValued="true" />
   <field name="videoVersionID"    type="string" indexed="true" stored="true" required="false" />
   <field name="videoTypeID"       type="string" indexed="true" stored="true" required="false" />
   <field name="length"            type="long"   indexed="true" stored="true" required="false" />

   <!-- stored information for ui -->
   <field name="lastComment"       type="string" indexed="false" stored="true" required="false"/>
   <field name="numComments"       type="int"    indexed="false" stored="true" required="false"/>

   <!-- video marker properties -->
   <field name="inpoint"		   type="long"	 indexed="true" stored="true" required="false"/>
   <field name="outpoint"		   type="long"	 indexed="true" stored="true" required="false"/>   
   <field name="duration"          type="long"	 indexed="true" stored="true" required="false"/>  
      
   <!-- sort fields -->
   <field name="vin" type="string"  indexed="true" stored="true" required="true" />
   <field name="status" type="string"  indexed="true" stored="true" required="true" />
   <field name="essenceStatus" type="string"  indexed="true" stored="true" required="true" />
   <field name="legalStatus" type="string"  indexed="true" stored="true" required="true" />
   <field name="partitionAbbreviation"   type="string"  indexed="true" stored="true" required="true" />
   <field name="productionTimestamp"     type="date" indexed="true" stored="true" required="false" />
   <field name="recordCreationTimestamp"     type="date" indexed="true" stored="true" required="true" />
   <field name="recordModificationTimestamp" type="date" indexed="true" stored="true" required="true" />
  
   <!-- rms info für rightscheck -->
   <dynamicField name="rms_positive_*" type="rightsterm" indexed="true"  stored="true"  multiValued="true" />
   <dynamicField name="rms_negative_*" type="rightsterm" indexed="true"  stored="true"  multiValued="true" />

    <!-- START Search Extensions for configurable search -->

    <!-- Field for fulltext search. ONLY copy field target -->
    <field name="fullTextSearchField" type="text_general" indexed="true" stored="false" multiValued="true" />
    <!-- Field for fulltext search. ONLY indexing of the application writes data here. -->
    <field name="fullTextSearchIndexWriteField" type="text_general" indexed="true" stored="true" multiValued="true" />

    <!-- ONLY copy field target. All suggestion fields will be copied into this field. Also this is used as spellchecker. -->
    <field name="allSuggestions" type="text_general" indexed="true" stored="false" multiValued="true" />
    
    <!--
    Description of the field names:
      Prefix
        c_        : prefix for fields that belong to the configurable search
        
      Type of field
        store_     : Only for storing data to be displayed later (e.g. in data browser), will also be indexed so the field can be used for sorting
        sort_      : Only for sorting. In case of multi value taxonomy fields this index field contains only the first of the values
        filter_    : Field should be used as filter for the advanced search. Contains the option ids in case of choice fields
        fsuggest_  : Field is being used to determine suggestions depending on a string the user entered in the search field. Suggestions are the string values of options
        fsuggestng_: like suggest, with ngrams

      Type of data            
        string_   : Textual data of the application (e.g. "Sebastian Vettel" as value of an option or  "Tolles Video Asset" as input from an user for a text field)
        id_       : An id (e.g. option id)
     -->
     
    <!-- Stored fields for display in data browser. Indexing is required after edit for the data browser to show the new values -->
    <dynamicField name="c_store_string_*" type="string" indexed="true"  stored="true"  multiValued="true" />
    <dynamicField name="c_sort_string_*" type="string" indexed="true"  stored="true"  multiValued="false" />
    <dynamicField name="c_store_date_*" type="date" indexed="true"  stored="true"  multiValued="true" />
    <dynamicField name="c_sort_date_*" type="date" indexed="true"  stored="true"  multiValued="false" />
    <dynamicField name="c_store_int_*" type="int" indexed="true"  stored="true"  multiValued="true" />
    <dynamicField name="c_sort_int_*" type="int" indexed="true"  stored="true"  multiValued="false" />
    <dynamicField name="c_store_long_*" type="long" indexed="true"  stored="true"  multiValued="true" />
    <dynamicField name="c_sort_long_*" type="long" indexed="true"  stored="true"  multiValued="false" />
    <dynamicField name="c_store_float_*" type="float" indexed="true"  stored="true"  multiValued="true" />
    <dynamicField name="c_sort_float_*" type="float" indexed="true"  stored="true"  multiValued="false" />
    
    <!-- Fields for Filter/Advanced Search -->
    <dynamicField name="c_filter_id_*" type="string" indexed="true" stored="true" multiValued="true" />    <!-- Contains the IDs of Options -->
    <dynamicField name="c_filter_date_*" type="date" indexed="true" stored="true" multiValued="true" />
    <dynamicField name="c_filter_int_*" type="int" indexed="true" stored="true" multiValued="true" />
    <dynamicField name="c_filter_long_*" type="long" indexed="true" stored="true" multiValued="true" />
    <dynamicField name="c_filter_float_*" type="float" indexed="true" stored="true" multiValued="true" />
    <dynamicField name="c_filter_boolean_*" type="boolean" indexed="true" stored="true" multiValued="true" />
    
    <!-- Fields for Suggestions -->
    <dynamicField name="c_fsuggest_string_*" type="string" indexed="true"  stored="true"  multiValued="true" /> <!-- Contains value and the synonyms of the Option -->
    <dynamicField name="c_fsuggestng_string_*" type="string" indexed="true"  stored="true"  multiValued="true" />

    <!-- Fields for Facets -->
    <dynamicField name="c_facet_string_*" type="string" indexed="true"  stored="true"  multiValued="true" /> <!-- Enthält den Value und die Synonyme der Option, eingegebenen Text o.ä. -->
    <dynamicField name="c_facet_date_*" type="date" indexed="true"  stored="true"  multiValued="true" />
    <dynamicField name="c_facet_int_*" type="int" indexed="true"  stored="true"  multiValued="true" />
    <dynamicField name="c_facet_long_*" type="long" indexed="true"  stored="true"  multiValued="true" />

	<!-- Copy fultext search write field to fulltext search field -->
    <copyField source="fullTextSearchIndexWriteField" dest="fullTextSearchField" />

    <!-- Copy all suggestions fields to a single field which will be used as spellchecker -->
    <copyField source="c_fsuggest_string_*" dest="allSuggestions" />
    
    <!-- Copy all suggestion fields into the fulltext search field -->
    <copyField source="c_fsuggest_string_*" dest="fullTextSearchField" />
    <!-- Also copy all suggestion fields for the legacy fulltext search -->
    <copyField source="c_fsuggest_string_*" dest="text" />
    
    <!-- Also use all fulltext search fields of the configurable search for the legacy fulltext search -->
    <copyField source="fullTextSearchIndexWriteField" dest="text" />

    <!-- END Search Extensions for configurable search -->

	<!-- Copy fulltext write field to fulltext search field -->    
    <copyField source="textWrite" dest="text" />
    
 </fields>

 <!-- field to use to determine and enforce document uniqueness. -->
 <uniqueKey>entityID</uniqueKey>

 <!-- field for the QueryParser to use when an explicit fieldname is absent -->
 <defaultSearchField>text</defaultSearchField>

 <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
 <solrQueryParser defaultOperator="OR"/>
 
</schema>