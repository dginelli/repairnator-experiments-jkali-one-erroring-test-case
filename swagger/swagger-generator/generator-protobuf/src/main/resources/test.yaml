swagger: "2.0"
info:
  version: "1.0.0"
  title: "swagger definition for org.apache.servicecomb.demo.springmvc.server.CodeFirstSpringmvc"
  x-java-interface: "cse.gen.springmvctest.springmvc.codeFirst.CodeFirstSpringmvcIntf"
basePath: "/codeFirstSpringmvc"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /genericDate:
    post:
      operationId: "testGenericDate"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          $ref: "#/definitions/GenericDate"
      responses:
        200:
          description: "response of 200"
          schema:
            $ref: "#/definitions/GenericDate"
  /testrawjson:
    post:
      operationId: "testRawJsonString"
      parameters:
      - name: "jsonInput"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /fallback/force/{name}:
    get:
      operationId: "fallbackForce"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "xxx"
          schema:
            type: "string"
        490:
          description: "xxx"
          schema:
            type: "string"
  /responseEntity:
    post:
      operationId: "responseEntity"
      parameters:
      - name: "date"
        in: "formData"
        required: false
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
            format: "date-time"
          headers:
            h1:
              type: "string"
            h2:
              type: "string"
    patch:
      operationId: "responseEntityPATCH"
      parameters:
      - name: "date"
        in: "formData"
        required: false
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
            format: "date-time"
          headers:
            h1:
              type: "string"
            h2:
              type: "string"
  /testvoidInRPC:
    get:
      operationId: "testvoidInRPC"
      parameters: []
      responses:
        200:
          description: "response of 200"
  /upload:
    post:
      operationId: "fileUpload"
      produces:
      - "text/plain"
      parameters:
      - name: "file1"
        in: "formData"
        required: false
        type: "file"
      - name: "someFile"
        in: "formData"
        required: false
        type: "file"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /prometheusForTest:
    get:
      operationId: "prometheusForTest"
      parameters: []
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /checkQueryObject:
    post:
      operationId: "checkQueryObject"
      parameters:
      - name: "name"
        in: "query"
        required: false
        type: "string"
      - name: "otherName"
        in: "query"
        required: false
        type: "string"
      - in: "body"
        name: "requestBody"
        required: true
        schema:
          $ref: "#/definitions/Person"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /upload1:
    post:
      operationId: "fileUpload1"
      produces:
      - "text/plain"
      parameters:
      - name: "file1"
        in: "formData"
        required: false
        type: "file"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /addstring:
    delete:
      operationId: "addString"
      produces:
      - "text/plain"
      parameters:
      - name: "s"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /add:
    post:
      operationId: "add"
      parameters:
      - name: "a"
        in: "formData"
        required: false
        type: "integer"
        format: "int32"
      - name: "b"
        in: "formData"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "integer"
            format: "int32"
  /reduce:
    get:
      operationId: "reduce"
      parameters:
      - name: "b"
        in: "cookie"
        required: false
        type: "integer"
        format: "int32"
      - name: "a"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "integer"
            format: "int32"
  /sayhello:
    post:
      operationId: "sayHello"
      parameters:
      - in: "body"
        name: "user"
        required: true
        schema:
          $ref: "#/definitions/Person"
      responses:
        200:
          description: "response of 200"
          schema:
            $ref: "#/definitions/Person"
  /traceId:
    get:
      operationId: "getTraceId"
      parameters: []
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /genericGenericUser:
    post:
      operationId: "testGenericGenericUser"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          $ref: "#/definitions/GenericGenericUser"
      responses:
        200:
          description: "response of 200"
          schema:
            $ref: "#/definitions/GenericGenericUser"
  /fallback/returnnull/{name}:
    get:
      operationId: "fallbackReturnNull"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "xxx"
          schema:
            type: "string"
        490:
          description: "xxx"
          schema:
            type: "string"
  /sayhi/{name}/v2:
    put:
      operationId: "sayHi2"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /testenum/{name}:
    get:
      operationId: "testEnum"
      parameters:
      - name: "username"
        in: "query"
        required: false
        type: "string"
      - name: "name"
        in: "path"
        required: true
        type: "string"
        enum:
        - "abc"
        - "def"
      responses:
        200:
          description: "200 normal"
          schema:
            type: "string"
        490:
          description: "490 exception"
          schema:
            type: "string"
  /genericEnum:
    post:
      operationId: "testGenericEnum"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          $ref: "#/definitions/GenericHttpStatus"
      responses:
        200:
          description: "response of 200"
          schema:
            $ref: "#/definitions/GenericHttpStatus"
  /testDelay:
    get:
      operationId: "testDelay"
      parameters: []
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /genericLong:
    post:
      operationId: "testGenericLong"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          $ref: "#/definitions/GenericLong"
      responses:
        200:
          description: "response of 200"
          schema:
            $ref: "#/definitions/GenericLong"
  /mapObject:
    post:
      operationId: "testMapObject"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          type: "object"
          additionalProperties:
            type: "object"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "object"
            additionalProperties:
              type: "object"
  /testVoidInRPC:
    get:
      operationId: "testVoidInRPC"
      parameters: []
      responses:
        200:
          description: "response of 200"
  /checkVoidResult:
    get:
      operationId: "checkVoidResult"
      parameters: []
      responses:
        200:
          description: "response of 200"
          schema:
            type: "boolean"
  /sayhi/compressed/{name}/v2:
    get:
      operationId: "sayHiForCompressed"
      produces:
      - "text/plain"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /saysomething:
    post:
      operationId: "saySomething"
      parameters:
      - name: "prefix"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "user"
        required: true
        schema:
          $ref: "#/definitions/Person"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /checkQueryGenericObject:
    put:
      operationId: "checkQueryGenericObject"
      parameters:
      - in: "body"
        name: "requestBody"
        required: true
        schema:
          $ref: "#/definitions/GenericParamPerson"
      - name: "str"
        in: "query"
        required: false
        type: "string"
      - name: "num"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /checkQueryGenericString:
    put:
      operationId: "checkQueryGenericString"
      parameters:
      - name: "str"
        in: "query"
        required: false
        type: "string"
      - in: "body"
        name: "requestBody"
        required: true
        schema:
          $ref: "#/definitions/GenericParamPerson"
      - name: "num"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      - name: "data"
        in: "query"
        required: false
        type: "string"
      - name: "strExtended"
        in: "query"
        required: false
        type: "string"
      - name: "intExtended"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /testAbort:
    get:
      operationId: "testAbort"
      parameters: []
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /testUserMap:
    post:
      operationId: "testUserMap"
      parameters:
      - in: "body"
        name: "userMap"
        required: true
        schema:
          type: "object"
          additionalProperties:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "object"
            additionalProperties:
              $ref: "#/definitions/User"
  /textPlain:
    post:
      operationId: "textPlain"
      consumes:
      - "text/plain"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /sayhi/{name}:
    put:
      operationId: "sayHi"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /appXml:
    post:
      operationId: "appXml"
      consumes:
      - "application/json"
      produces:
      - "application/xml"
      parameters:
      - in: "body"
        name: "person"
        required: true
        schema:
          $ref: "#/definitions/JAXBPerson"
      responses:
        200:
          description: "response of 200"
          schema:
            $ref: "#/definitions/JAXBPerson"
  /rawJsonAnnotation:
    post:
      operationId: "testRawJsonAnnotation"
      parameters:
      - in: "body"
        name: "jsonInput"
        required: true
        schema:
          type: "string"
        x-raw-json: true
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /testVoidInRestTemplate:
    get:
      operationId: "testVoidInRestTemplate"
      parameters: []
      responses:
        200:
          description: "response of 200"
  /cseResponse:
    get:
      operationId: "cseResponse"
      parameters: []
      responses:
        200:
          description: "response of 200"
          schema:
            $ref: "#/definitions/User"
          headers:
            h1:
              type: "string"
            h2:
              type: "string"
  /object:
    post:
      operationId: "testObject"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          type: "object"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "object"
  /holderUser:
    post:
      operationId: "testHolderUser"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          $ref: "#/definitions/HolderUser"
      responses:
        200:
          description: "response of 200"
          schema:
            $ref: "#/definitions/HolderUser"
  /ignore:
    post:
      operationId: "testModelWithIgnoreField"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          $ref: "#/definitions/InputModelForTestIgnore"
      responses:
        200:
          description: "response of 200"
          schema:
            $ref: "#/definitions/OutputModelForTestIgnore"
  /fallback/fromcache/{name}:
    get:
      operationId: "fallbackFromCache"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "xxx"
          schema:
            type: "string"
        490:
          description: "xxx"
          schema:
            type: "string"
  /genericUser:
    post:
      operationId: "testGenericUser"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          $ref: "#/definitions/GenericUser"
      responses:
        200:
          description: "response of 200"
          schema:
            $ref: "#/definitions/GenericUser"
  /emptyObject:
    post:
      operationId: "testEmpty"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          $ref: "#/definitions/EmptyObject"
      responses:
        200:
          description: "response of 200"
          schema:
            $ref: "#/definitions/EmptyObject"
  /addDate:
    post:
      operationId: "addDate"
      parameters:
      - name: "date"
        in: "formData"
        required: false
        type: "string"
        format: "date-time"
      - name: "seconds"
        in: "query"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
            format: "date-time"
  /fallback/throwexception/{name}:
    get:
      operationId: "fallbackThrowException"
      parameters:
      - name: "name"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "xxx"
          schema:
            type: "string"
        490:
          description: "xxx"
          schema:
            type: "string"
  /istrue:
    get:
      operationId: "isTrue"
      parameters: []
      responses:
        200:
          description: "response of 200"
          schema:
            type: "boolean"
  /listObject:
    post:
      operationId: "testListObject"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          type: "array"
          items:
            type: "object"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "array"
            items:
              type: "object"
  /testvoidInRestTemplate:
    get:
      operationId: "testvoidInRestTemplate"
      parameters: []
      responses:
        200:
          description: "response of 200"
  /bytes:
    post:
      operationId: "bytes"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          type: "string"
          format: "byte"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
            format: "byte"
  /testform:
    post:
      operationId: "testform"
      parameters:
      - name: "form1"
        in: "formData"
        description: "a required form param"
        required: true
        type: "string"
      - name: "form2"
        in: "formData"
        description: "an optional form param"
        required: false
        type: "string"
      responses:
        200:
          description: "response of 200"
          schema:
            type: "string"
  /holderObject:
    post:
      operationId: "testHolderObject"
      parameters:
      - in: "body"
        name: "input"
        required: true
        schema:
          $ref: "#/definitions/HolderObject"
      responses:
        200:
          description: "response of 200"
          schema:
            $ref: "#/definitions/HolderObject"
definitions:
  JAXBJob:
    type: "object"
    properties:
      name:
        type: "string"
      content:
        type: "string"
    xml:
      name: "job"
    x-java-class: "org.apache.servicecomb.demo.jaxbbean.JAXBJob"
  JAXBPerson:
    type: "object"
    properties:
      name:
        type: "string"
      age:
        type: "integer"
        format: "int32"
        xml:
          attribute: true
      role:
        type: "string"
      weight:
        type: "string"
      job:
        $ref: "#/definitions/JAXBJob"
    xml:
      name: "person"
    x-java-class: "org.apache.servicecomb.demo.jaxbbean.JAXBPerson"
  GenericParam:
    type: "object"
    properties:
      str:
        type: "string"
      num:
        type: "integer"
        format: "int64"
      data:
        type: "object"
    x-java-class: "org.apache.servicecomb.demo.compute.GenericParam"
  GenericParamPerson:
    type: "object"
    properties:
      str:
        type: "string"
      num:
        type: "integer"
        format: "int64"
      data:
        $ref: "#/definitions/Person"
    x-java-class: "org.apache.servicecomb.demo.compute.GenericParam<org.apache.servicecomb.demo.compute.Person>"
  Person:
    type: "object"
    properties:
      name:
        type: "string"
    x-java-class: "org.apache.servicecomb.demo.compute.Person"
  User:
    type: "object"
    properties:
      name:
        type: "string"
      age:
        type: "integer"
        format: "int32"
      index:
        type: "integer"
        format: "int32"
      names:
        type: "array"
        items:
          type: "string"
    x-java-class: "org.apache.servicecomb.demo.server.User"
  EmptyObject:
    type: "object"
    x-java-class: "org.apache.servicecomb.demo.EmptyObject"
  Generic:
    type: "object"
    properties:
      value:
        type: "object"
    x-java-class: "org.apache.servicecomb.demo.Generic"
  GenericDate:
    type: "object"
    properties:
      value:
        type: "string"
        format: "date-time"
    x-java-class: "org.apache.servicecomb.demo.Generic<java.util.Date>"
  GenericHttpStatus:
    type: "object"
    properties:
      value:
        type: "string"
        enum:
        - "CONTINUE"
        - "SWITCHING_PROTOCOLS"
        - "PROCESSING"
        - "CHECKPOINT"
        - "OK"
        - "CREATED"
        - "ACCEPTED"
        - "NON_AUTHORITATIVE_INFORMATION"
        - "NO_CONTENT"
        - "RESET_CONTENT"
        - "PARTIAL_CONTENT"
        - "MULTI_STATUS"
        - "ALREADY_REPORTED"
        - "IM_USED"
        - "MULTIPLE_CHOICES"
        - "MOVED_PERMANENTLY"
        - "FOUND"
        - "MOVED_TEMPORARILY"
        - "SEE_OTHER"
        - "NOT_MODIFIED"
        - "USE_PROXY"
        - "TEMPORARY_REDIRECT"
        - "PERMANENT_REDIRECT"
        - "BAD_REQUEST"
        - "UNAUTHORIZED"
        - "PAYMENT_REQUIRED"
        - "FORBIDDEN"
        - "NOT_FOUND"
        - "METHOD_NOT_ALLOWED"
        - "NOT_ACCEPTABLE"
        - "PROXY_AUTHENTICATION_REQUIRED"
        - "REQUEST_TIMEOUT"
        - "CONFLICT"
        - "GONE"
        - "LENGTH_REQUIRED"
        - "PRECONDITION_FAILED"
        - "PAYLOAD_TOO_LARGE"
        - "REQUEST_ENTITY_TOO_LARGE"
        - "URI_TOO_LONG"
        - "REQUEST_URI_TOO_LONG"
        - "UNSUPPORTED_MEDIA_TYPE"
        - "REQUESTED_RANGE_NOT_SATISFIABLE"
        - "EXPECTATION_FAILED"
        - "I_AM_A_TEAPOT"
        - "INSUFFICIENT_SPACE_ON_RESOURCE"
        - "METHOD_FAILURE"
        - "DESTINATION_LOCKED"
        - "UNPROCESSABLE_ENTITY"
        - "LOCKED"
        - "FAILED_DEPENDENCY"
        - "UPGRADE_REQUIRED"
        - "PRECONDITION_REQUIRED"
        - "TOO_MANY_REQUESTS"
        - "REQUEST_HEADER_FIELDS_TOO_LARGE"
        - "UNAVAILABLE_FOR_LEGAL_REASONS"
        - "INTERNAL_SERVER_ERROR"
        - "NOT_IMPLEMENTED"
        - "BAD_GATEWAY"
        - "SERVICE_UNAVAILABLE"
        - "GATEWAY_TIMEOUT"
        - "HTTP_VERSION_NOT_SUPPORTED"
        - "VARIANT_ALSO_NEGOTIATES"
        - "INSUFFICIENT_STORAGE"
        - "LOOP_DETECTED"
        - "BANDWIDTH_LIMIT_EXCEEDED"
        - "NOT_EXTENDED"
        - "NETWORK_AUTHENTICATION_REQUIRED"
        x-java-class: "org.springframework.http.HttpStatus"
    x-java-class: "org.apache.servicecomb.demo.Generic<org.springframework.http.HttpStatus>"
  GenericGenericUser:
    type: "object"
    properties:
      value:
        $ref: "#/definitions/GenericUser"
    x-java-class: "org.apache.servicecomb.demo.Generic<org.apache.servicecomb.demo.Generic<org.apache.servicecomb.demo.server.User>>"
  GenericUser:
    type: "object"
    properties:
      value:
        $ref: "#/definitions/User"
    x-java-class: "org.apache.servicecomb.demo.Generic<org.apache.servicecomb.demo.server.User>"
  GenericLong:
    type: "object"
    properties:
      value:
        type: "integer"
        format: "int64"
    x-java-class: "org.apache.servicecomb.demo.Generic<java.lang.Long>"
  Holder:
    type: "object"
    properties:
      value:
        type: "object"
    x-java-class: "javax.xml.ws.Holder"
  HolderObject:
    type: "object"
    properties:
      value:
        type: "object"
    x-java-class: "javax.xml.ws.Holder<java.lang.Object>"
  HolderUser:
    type: "object"
    properties:
      value:
        $ref: "#/definitions/User"
    x-java-class: "javax.xml.ws.Holder<org.apache.servicecomb.demo.server.User>"
  InputModelForTestIgnore:
    type: "object"
    properties:
      content:
        type: "string"
    x-java-class: "org.apache.servicecomb.demo.ignore.InputModelForTestIgnore"
  OutputModelForTestIgnore:
    type: "object"
    properties:
      inputId:
        type: "string"
      content:
        type: "string"
    x-java-class: "org.apache.servicecomb.demo.ignore.OutputModelForTestIgnore"
  org.apache.servicecomb.core.definition.schema.ProducerSchemaFactory.createSchema(ProducerSchemaFactory.java:133)
