#!/bin/bash
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# WildFly Control Script
# -----------------------------------------------------------------------------
# History:
#   Version 1.00 - 2017-10-16, Kim Jensen <kim@dawn.dk>
#     o Initial version
# -----------------------------------------------------------------------------
# Methods:
#     o show_help     ( Void )   :: Shows help on using the script
#     o doLock        ( Void )   :: Creates a lock file
#     o getProcesses  ( Void )   :: Retrieves WildFly process count
#     o doStart       ( Void )   :: Attempts to start WildFly
#     o doStop        ( Void )   :: Attempts to stop WildFly
#     o doDeploy      ( Void )   :: Attempts to deploy into WildFly
#     o doUndeploy    ( Void )   :: Attempts to undeploy from WildFly
#     o doStatus      ( Void )   :: Retrieves the WildFly status
#     o doLog         ( Void )   :: Tails the server log
#     o doClean       ( Void )   :: Cleans existing test results
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Configuration settings, please only modify this section
# -----------------------------------------------------------------------------
readonly source="${HOME}/JavaDog.io/github/cws"
readonly jacoco_agent="${HOME}/.m2/repository/org/jacoco/org.jacoco.agent/0.7.9/org.jacoco.agent-0.7.9-runtime.jar"
readonly package="io.javadog.cws.*"
readonly debugPort=8787
readonly appDirectory="/opt/java/wildfly"

# Java & JBoss (WildFly) settings
JAVA_OPTS="${JAVA_OPTS} -Xms1303m -Xmx1303m -Djava.net.preferIPv4Stack=true"
export JBOSS_HOME="${appDirectory}"
export JBOSS_PIDFILE="${source}/cws.pid"
export JBOSS_CONFIG="standalone-cws.xml"
export JBOSS_SCRIPT="${JBOSS_HOME}/bin/standalone.sh --server-config=${JBOSS_CONFIG} -Djboss.node.name=cws"
export LAUNCH_JBOSS_IN_BACKGROUND=1
export PATH="${JBOSS_HOME}/bin:${PATH}"

# To create Coverage reports from FitNesse, we must start WildFly with an Agent,
# which can be used. For the Coverage, we're using JaCoCo, for more information
# see: http://www.eclemma.org/jacoco/trunk/doc/agent.html
# Note, the JaCoCo report is first written *after* WildFly is stopped
export JAVA_OPTS="${JAVA_OPTS} -javaagent:${jacoco_agent}=destfile=${source}/target/jacoco.exec,includes=${package},append=true,output=file"

readonly cmdStart="${JBOSS_SCRIPT} --debug ${debugPort}"

# Lock file settings for flock. Please don't change this!
readonly scriptLockFD="200"
readonly scriptLock="/tmp/.`basename $0`.lock"

# Script specific information, should only be altered, if logic is updated
readonly scriptVersion="1.00"
readonly scriptAuthor="Kim Jensen"
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Show Help - Displays the help, to use this script
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
show_help () {
    echo "WildFly Control script, Version ${scriptVersion} by ${scriptAuthor}"
    echo "Usage: `basename $0` [COMMAND]"
    echo
    echo "  The Command must be one of the following:"
    echo "    start     Attempts to start a CWS WildFly instance"
    echo "    stop      Attempts to stop the running CWS WildFly instance"
    echo "    deploy    Deploy the latest CWS snapshot to WildFly"
    echo "    undeploy  Undeploy the currently deployed CWS snapshot"
    echo "    status    Retrieves the status of the CWS WildFly instance"
    echo "    log       Tail on the Server Log"
    echo "    clean     Cleanup of WildFly, removing all deployments & log files"
    echo
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# getProcesses - Returns the number of processes associated with WildFly
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> 1 if WildFly is running, 0 if not
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
getProcesses () {
    currentProcesses=0

    if [ -f ${JBOSS_PIDFILE} ]; then
        read ppid < ${JBOSS_PIDFILE}
        processes=`ps --pid ${ppid} 2>/dev/null | grep -c ${ppid} 2>/dev/null`
        if [ "${processes}" -eq "1" ]; then
            currentProcesses=1
        else
            rm -f ${JBOSS_PIDFILE}
        fi
    fi

    return ${currentProcesses}
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStart - Attempts to start WildFly
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStart () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "Starting WildFly ..."
        ${cmdStart} 2>&1 &
        echo "WildFly has been started"
    else
        echo "WildFly is already running"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStop - Attempts to stop WildFly
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStop () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "WildFly is not running"
    else
        echo "Stopping WildFly ..."
        read ppid < ${JBOSS_PIDFILE}
        kill -15 ${ppid}
        echo "WildFly has been stopped"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doDeploy - Attempts to deploy the latest snapshot to WildFly
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doDeploy () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "WildFly is not running"
    else
        echo "Deploying the latest Snapshot to WildFly"
        ${JBOSS_HOME}/bin/jboss-cli.sh --connect --controller=localhost:9990 --command="deploy ${source}/cws-war/target/cws.war --force"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doUndeploy - Undeploy's current deployed snapshot from WildFly
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doUndeploy () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "WildFly is not running"
    else
        echo "Undeploying current deployed snapshot from WildFly"
        ${JBOSS_HOME}/bin/jboss-cli.sh --connect --controller=localhost:9990 --command="undeploy cws.war"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doStatus - Retrieves the WildFly Status
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doStatus () {
    getProcesses

    if [ $? -eq 0 ]; then
        echo "WildFly is not running"
    else
        echo "WildFly is currently running"
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doLog - Tail on the WildFly Server log
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doLog () {
    tail -f ${JBOSS_HOME}/standalone/log/server.log
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# doClean - Cleaning up logs and results
# -----------------------------------------------------------------------------
# Param  -> Void
# Return -> Void
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
doClean () {
    getProcesses

    if [ $? -ge 1 ]; then
        echo "Cannot clear files when WildFly is running."
    else
        standalone=${JBOSS_HOME}/standalone
        configuration=${standalone}/configuration

        echo "Cleaning WildFly Log files"
        rm -fr ${standalone}/log 2>/dev/null
        mkdir  ${standalone}/log 2>/dev/null
        touch  ${standalone}/log/server.log 2>/dev/null

        echo "Cleaning WildFly Deployments"
        rm -fr ${standalone}/data/* 2>/dev/null
        rm -fr ${standalone}/deployments/* 2>/dev/null
        rm -fr ${standalone}/tmp/* 2>/dev/null
        mkdir  ${standalone}/tmp/auth 2>/dev/null
        rm -fr ${standalone}/work/jboss.web/default-host/* 2>/dev/null

        echo "Cleaning (Reverting) WildFLy Standalone Configuration"
        cp ${configuration}/standalone-cws-clean.xml ${configuration}/${JBOSS_CONFIG}
        rm -fr ${configuration}/standalone_xml_history 2>/dev/null
    fi
}


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# Main part, please don't touch!
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

# Create & Acquire lock file
eval "exec ${scriptLockFD}>${scriptLock}"
flock -n ${scriptLockFD}

if [ $? -ne 0 ]; then
    echo "Another instance is already running..."
    exit 1
elif [ $# = 1 ]; then
    action=${1}

    if [ "${action}" = "start" ]; then
        doStart
    elif [ "${action}" = "stop" ]; then
        doStop
    elif [ "${action}" = "deploy" ]; then
        doDeploy
    elif [ "${action}" = "undeploy" ]; then
        doUndeploy
    elif [ "${action}" = "status" ]; then
        doStatus
    elif [ "${action}" = "log" ]; then
        doLog
    elif [ "${action}" = "clean" ]; then
        doClean
    else
        show_help
    fi
else
    show_help
fi

# Now, remove the lockFile
flock -u "${scriptLockFD}"
rm ${scriptLock}
